kind: Namespace
apiVersion: v1
metadata:
  name: pgadmin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pgadmin
  name: pgadmin
  namespace: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      securityContext:
        runAsNonRoot: false
      serviceAccountName: pgadmin
      containers:
        - image: dpage/pgadmin4:latest
          imagePullPolicy: Always
          name: pgadmin
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: "contact@zippelf.com"
            - name: PGADMIN_DEFAULT_PASSWORD
              value: "admin"
            - name: PGADMIN_PORT
              value: "80"
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pgadmin
  name: pgadmin
  namespace: pgadmin
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: pgadmin
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: pgadmin
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: true
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: true
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  #  requiredDropCapabilities:
  #    - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pgadmin
  namespace: pgadmin
automountServiceAccountToken: false
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pgadmin-psp
  namespace: pgadmin
roleRef:
  kind: Role
  name: pgadmin-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: pgadmin
    namespace: pgadmin

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pgadmin-psp
  namespace: pgadmin
rules:
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames: ['pgadmin']
  - apiGroups: ['extensions']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames: ['pgadmin']
